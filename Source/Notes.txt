To Do
=====
 - MSI and different configurations (so we can migrate other solutions in)
 - Sandcastle
 - Before and After events for IIS steps
 - Have a deployment build following the compile build
 - Split out azure sections of build script so we can run in a deployment build (msdeploy is already spilt so can be called separately)
 - Test for whitespace in solution path (to see if we are missing quotes anywhere)
 - Add generic scripts to create NuGet package.
 - There will be a problem if an Azure Role (strongly named) references a class library which is delay signed.
 - Project configuration check for MSDeploy?
 - Project configuration check for Database projects (see below)?
 - Add "Full Build" with ForceInitaliseEnvironment
 x Fix <Exec Condition=" '$(InstallNuGetPackages)'=='true' " Command="%22$(NuGetDotExePath)%22 install %22%(NuGetPackage.FullPath)%22" /> issue by using same approach as PowerShell.
 - Not re-generating AssemblyInfoCommon for "Release" build (should be as the Configuration is written in the file).
 - Disallow delay signed Azure Roles
 - Seems to be re-compiling between cmd line builds?
 - Report times for each stage of build and summarise at the end.
 - Put IIS version etc in TFS Build definition (do not require, allow defaults)
 - Check for usage of IIS in web project files.
 - Improve error message when missing import is detected in csproj files.
 - Project checking allows DelaySigned switch to be applied to Azure Role projects.
 - Test properties are listed twice.
 - Script is trying to do StyleCop targets fix but StyleCop is not installed.
 - Check of Azure Cmdlets install is not causing a TFS Build error if it fails.
 - (?) Write something to parse TFS logs looking for unexpected instances of "\csc.exe" (?)
 - Script is insisting on Azure cert/sub id
 - MSDeploy - need to use "Include IIS settings as configured in IIS" setting.
 - For TFS2010 build, can we determine Build Number prefix from the name of the Team Build?
 - "Before" and "after" targets not being called in Team Build.
 x Add in NuGet mechanism (include nuget.exe in package etc)
 - Check security on IIS root site to see if it will work with Azure (NB - MSDN forum)
 - Running "CreateAzureAffinityGroups" and "CreateAzureStorageAccounts" targets (after tests) on a desktop build.
 - "AfterDropBuildCustom" and "BeforeDropBuildCustom" are being called on Desktop Builds.
 - Add a step to the project configuration check to test for usage of NuGet targets file.

Database
========
Common
 - <IncludeSchemaNameInFileName>False</IncludeSchemaNameInFileName>
Release
 - <TargetConnectionString>Data Source=.;Integrated Security=True;Pooling=False</TargetConnectionString>
 - <TargetDatabase>Acme.PetShop</TargetDatabase>
 - <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
 - <DeployToDatabase>True</DeployToDatabase>
Debug
 - <TargetConnectionString>Data Source=.;Integrated Security=True;Pooling=False</TargetConnectionString>
 - <TargetDatabase>Acme.PetShop</TargetDatabase>
 - <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
 - <DeployToDatabase>True</DeployToDatabase>
 - <RunCodeAnalysis>True</RunCodeAnalysis>
 - <CodeAnalysisRules>+!Microsoft.Rules.Data.SR0014;+!Microsoft.Rules.Data.SR0008;+!Microsoft.Rules.Data.SR0010;+!Microsoft.Rules.Data.SR0013;+!Microsoft.Rules.Data.SR0001;+!Microsoft.Rules.Data.SR0009;+!Microsoft.Rules.Data.SR0012;+!Microsoft.Rules.Data.SR0011;+!Microsoft.Rules.Data.SR0016;+!Microsoft.Rules.Data.SR0015;+!Microsoft.Rules.Data.SR0005;+!Microsoft.Rules.Data.SR0006;+!Microsoft.Rules.Data.SR0004;+!Microsoft.Rules.Data.SR0007</CodeAnalysisRules>
  

C:\Workspaces\Temp\Acme.MSBuildTest\Trunk\Source\Scripts
%SystemDrive%\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe Acme.PetShop.Build.proj /t:PublishAzurePackages /p:DeployForTest=false

C:\Workspaces\GitHub\StealFocus\Build\Source\Artefacts\Example\Source\Scripts
"%windir%\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe" /t:PublishAzurePackages /p:DeployForTest=false

msbuild Acme.PetShop.Build.proj /p:ForceInitialiseEnvironment=true;DeleteBuildDirectory=true;DeleteMSTestResultsDirectory=true

msbuild Acme.PetShop.Build.proj /v:m

msbuild Acme.PetShop.Build.proj /v:q

msbuild Acme.PetShop.Build.proj

CommandFiles
 - Initialisation build (Full build?)
 - Normal build
 - Quick build

Stages
======
 - InitialiseBuild
 - InitialiseEnvironment
 - CodeGeneration
 - xxxx SolutionCompile
 - DeployForTest ?????????????? Configuration, BuildDirectoryPath
 - xxxx RunTests
 - Package - OK
 - BuildDocumentation - OK
 - xxxx DropBuild - MSTestResultsDirectoryPath, BuildDirectoryPath, DropLocationForBuild
 - EnvironmentDeploy - BuildDirectoryPath

 - CheckProjectConfigurations
 - On Compile - DelaySign=false;AssemblyOriginatorKeyFile=$(StrongNameKeyPairPath)
 - CorePackageWebProjectsForConfiguration, CorePackageSharePointProjectsForConfiguration, CorePublishAzureProjectsForConfiguration 
	- Configuration = Debug
	- OutputPath = $(BuildDirectoryPath)\Debug
	- 

TFS 2010 - Arguments
====================
 - Build location
 - Drop location
 - Version Number (add to standard MSBuild call to build solution)

 IsDesktopBuild, BuildDirectoryPath, DropLocationForBuild, MSTestResultsDirectoryPath, SolutionDirectoryPath

 BuildLabel, BuildLabelNumber, VersionNumber

TFS 2010 - DefaultTemplate.xaml
===============================
Run On Agent
- Initialize Variables
- Initialize Workspace
- CreateLabel
- Compile and Test (for each configuration)
  - Initialize Variables
  - Compile
  - Test
- AssociateChangesetsAndWorkItems

TFS 2008
========
BeforeEndToEndIteration
BuildNumberOverrideTarget
AfterEndToEndIteration
BeforeClean
AfterClean
BeforeCleanSolution
AfterCleanSolution
BeforeInitializeWorkspace
AfterInitializeWorkspace
BeforeGet
AfterGet
BeforeLabel
AfterLabel
BeforeCompile
AfterCompile
BeforeCompileConfiguration
AfterCompileConfiguration
BeforeCompileSolution
AfterCompileSolution
BeforeGetChangesetsAndUpdateWorkItems
AfterGetChangesetsAndUpdateWorkItems
BeforeTest
BeforeTestConfiguration
AfterTestConfiguration
AfterTest
GenerateDocumentation
PackageBinaries
BeforeOnBuildBreak
AfterOnBuildBreak
BeforeGetChangesetsOnBuildBreak
AfterGetChangesetsOnBuildBreak
BeforeCreateWorkItem
AfterCreateWorkItem

Kata
====
v1.1 (BizTalk)
RemoveDependentBizTalkApplications
StopBizTalkApplication
RemoveBizTalkApplicationAssembliesFromGac
RemoveBizTalkApplication
DeleteBizTalkHandlers
DeleteBizTalkHosts
CreateBizTalkHosts
CreateBizTalkHandlers
CreateBizTalkApplication
ExportBizTalkApplication
ImportBindingsForBizTalkApplication
StartBizTalkApplication

==============================================================================================================================
